pipeline {
    agent any

    stages {
        stage('Clone Repository') {
            steps {
                git credentialsId: 'GitHub', url: 'https://github.com/cyb-swap/shop-app.git'
            }
        }

        stage('Dependency-Check') {
            steps {
                dependencyCheck additionalArguments: '', odcInstallation: 'dep-check-auto'
                dependencyCheckPublisher pattern: ''
                archiveArtifacts allowEmptyArchive: true, artifacts: 'dependency-check-report.xml', fingerprint: true, followSymlinks: false, onlyIfSuccessful: true
                sh ' rm -rf dependency-check-report.xml*'
            }
        }
        
        stage('Build App Docker Image') {
            steps {
                script {
                    docker.build("shop_app_app:latest", "app")
                }
            }
        }
        
        stage('Build Database Docker Image') {
            steps {
                script {
                    docker.build("shop_app_database:latest", "database")
                }
            }
        }
        
        stage('Build Payment Gateway Docker Image') {
            steps {
                script {
                    docker.build("shop_app_payment_gateway:latest", "payment_gateway")
                }
            }
        }
        
        stage('Build Reverse Proxy Docker Image') {
            steps {
                script {
                    docker.build("shop_app_reverse_proxy:latest", "reverse_proxy")
                }
            }
        }

        stage('Scan App Docker Image with Grype') {
            steps {
                script {
                    // Run Grype scan on the app image
                    sh "grype shop_app_app:latest --output json > grype_app_scan.json"
                    // Optionally fail the build if vulnerabilities are found
                    def vulnerabilities = readJSON(file: 'grype_app_scan.json')
                    if (vulnerabilities.matches) {
                        error("Vulnerabilities found in app image!")
                    }
                }
            }
        }

        stage('Scan Database Docker Image with Grype') {
            steps {
                script {
                    // Run Grype scan on the database image
                    sh "grype shop_app_database:latest --output json > grype_database_scan.json"
                    // Check for vulnerabilities
                    def vulnerabilities = readJSON(file: 'grype_database_scan.json')
                    if (vulnerabilities.matches) {
                        error("Vulnerabilities found in database image!")
                    }
                }
            }
        }

        stage('Scan Payment Gateway Docker Image with Grype') {
            steps {
                script {
                    // Run Grype scan on the payment gateway image
                    sh "grype shop_app_payment_gateway:latest --output json > grype_payment_gateway_scan.json"
                    // Check for vulnerabilities
                    def vulnerabilities = readJSON(file: 'grype_payment_gateway_scan.json')
                    if (vulnerabilities.matches) {
                        error("Vulnerabilities found in payment gateway image!")
                    }
                }
            }
        }

        stage('Scan Reverse Proxy Docker Image with Grype') {
            steps {
                script {
                    // Run Grype scan on the reverse proxy image
                    sh "grype shop_app_reverse_proxy:latest --output json > grype_reverse_proxy_scan.json"
                    // Check for vulnerabilities
                    def vulnerabilities = readJSON(file: 'grype_reverse_proxy_scan.json')
                    if (vulnerabilities.matches) {
                        error("Vulnerabilities found in reverse proxy image!")
                    }
                }
            }
        }

        stage('SCA') {
            steps {
                script{
                    dir('app/react-app') {
                        sh 'yarn install'
                        snykSecurity(
                            snykInstallation: 'snyk',
                            snykTokenId: '59e68e07-6d49-416b-a4f3-ba4523a0f631',
                            failOnIssues: false,
                        )
                    }
                }
            }
        }
        
        stage('Run Docker Compose') {
            steps {
                script {
                    sh 'docker-compose up -d'
                }
            }
        }
    }
    
    post {
        always {
            script {
                sh 'docker-compose down'
            }
            cleanWs()
        }
    }
}
