pipeline {
    agent any

    stages {
        stage('Clone Repository') {
            steps {
                git credentialsId: 'GitHub', url: 'https://github.com/cyb-swap/shop-app.git'
            }
        }

        stage('Code Analysis') {
            environment {
                scannerHome = tool 'Sonar'
            }
            steps {
                script {
                    withSonarQubeEnv('Sonar') {
                        def sonarToken = credentials('squ_2869a0d7b671c7898f15c874f284b909323eb1ef')
                        sh """
                            #!/bin/bash
                            ${scannerHome}/opt/sonar-scanner/bin/sonar-scanner \\
                            -Dsonar.projectKey="shop-app" \\
                            -Dsonar.projectName="shop-app" \\
                            -Dsonar.host.url=http://localhost:9000 \\
                            -Dsonar.login=${sonarToken}
                        """
                    }
                }
            }
        }
        

        stage('Build App Docker Image') {
            steps {
                script {
                    docker.build("shop_app_app:latest", "app")
                }
            }
        }
        
        stage('Build Database Docker Image') {
            steps {
                script {
                    docker.build("shop_app_database:latest", "database")
                }
            }
        }
        
        stage('Build Payment Gateway Docker Image') {
            steps {
                script {
                    docker.build("shop_app_payment_gateway:latest", "payment_gateway")
                }
            }
        }
        
        stage('Build Reverse Proxy Docker Image') {
            steps {
                script {
                    docker.build("shop_app_reverse_proxy:latest", "reverse_proxy")
                }
            }
        }
        
        stage('Run Docker Compose') {
            steps {
                script {
                    sh 'docker-compose up -d'
                }
            }
        }
    }
    
    post {
        always {
            script {
                sh 'docker-compose down'
            }
            cleanWs()
        }
    }
}
