pipeline {
    agent any

    stages {
        stage('Clone Repository') {
            steps {
                git credentialsId: 'GitHub', url: 'https://github.com/cyb-swap/shop-app.git'
            }
        }

        stage('Dependency-Check') {
            steps {
                dependencyCheck additionalArguments: '--nvdApiKey 2a6b167d-8721-4fd6-878c-dc4a156434f7', odcInstallation: 'dep-check-auto'
                dependencyCheckPublisher pattern: ''
                archiveArtifacts allowEmptyArchive: true, artifacts: 'dependency-check-report.xml', fingerprint: true, followSymlinks: false, onlyIfSuccessful: true
                sh ' rm -rf dependency-check-report.xml*'
            }
        }
        
        stage('Build Docker Images') {
            steps {
                script {
                    def images = [
                        ["name": "luffymonkey1/shop_app_app:latest", "path": "app"],
                        ["name": "luffymonkey1/shop_app_database:latest", "path": "database"],
                        ["name": "luffymonkey1/shop_app_payment_gateway:latest", "path": "payment_gateway"],
                        ["name": "luffymonkey1/shop_app_reverse_proxy:latest", "path": "reverse_proxy"]
                    ]
                    
                    for (img in images) {
                        echo "Building Docker image: ${img.name}"
                        docker.build(img.name, img.path)
                    }
                }
            }
        }

        stage('Container Security') {
            steps {
                script {
                    try {
                        // Run the grype scan and redirect output to grype.txt
                        sh 'grype vulnerables/web-dvwa:latest > grype.txt'
                
                        // Archive the grype output regardless of success
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'grype.txt', fingerprint: true, followSymlinks: false
                
                        // Optionally read the vulnerabilities from the output file
                        def vulnerabilities = readFile('grype.txt')
                        echo "Grype Scan Output:\n${vulnerabilities}"
                
                        // Check if vulnerabilities were found and fail the build if necessary
                        if (vulnerabilities.contains('vulnerable')) {
                        error("Vulnerabilities found in vulnerables/web-dvwa:latest!")
                        }
                
                    } catch (Exception e) {
                        // Catch the exception and echo the error message
                        echo "Grype scan failed: ${e.message}"
                
                        // Archive the output even if the grype command fails
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'grype.txt', fingerprint: true, followSymlinks: false
                
                        // Optionally fail the build or handle the error
                        currentBuild.result = 'UNSTABLE' // Mark the build as unstable
                    } finally {
                        // Cleanup the output file after processing
                        sh 'rm -rf grype.txt'
                    }
                }
            }
        }        
         
        stage('SCA') {
            steps {
                script{
                    dir('app/react-app') {
                        sh 'yarn install'
                        snykSecurity(
                            snykInstallation: 'snyk',
                            snykTokenId: '59e68e07-6d49-416b-a4f3-ba4523a0f631',
                            failOnIssues: false,
                        )
                    }
                }
            }
        }
        
        stage('Docker Push') {
            steps {
                script {
                    // Use withCredentials to handle Docker Hub credentials securely
                    withCredentials([usernamePassword(credentialsId: 'dockerHub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                        // Login to Docker Hub
                        sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
                        
                        // List of built images to push
                        def images = [
                            "luffymonkey1/shop_app_app:latest",
                            "luffymonkey1/shop_app_database:latest",
                            "luffymonkey1/shop_app_payment_gateway:latest",
                            "luffymonkey1/shop_app_reverse_proxy:latest"
                        ]
                        
                        // Push each image to Docker Hub
                        for (img in images) {
                            echo "Pushing Docker image: ${img}"
                            sh "docker push ${img}"
                        }
                    }
                }
            }
        }
        
        stage('Run Docker Compose') {
            steps {
                script {
                    sh 'docker-compose up -d'
                }
            }
        }
    }
    
    post {
        always {
            script {
                sh 'docker-compose down'
            }
            cleanWs()
        }
    }
}
