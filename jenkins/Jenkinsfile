pipeline {
    agent any

    tools {
        nodejs 'NodeJS' 
        sonarQubeScanner 'Sonar'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git credentialsId: 'GitHub', url: 'https://github.com/cyb-swap/shop-app.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Optionally set the branch name based on your SCM strategy
                    def branchName = 'master'
                    withSonarQubeEnv('Sonar') {
                        sh "sonar-scanner -Dsonar.projectKey=shop-app -Dsonar.sources=. -Dsonar.host.url=http://localhost:9000 -Dsonar.login=squ_2869a0d7b671c7898f15c874f284b909323eb1ef -Dsonar.branch.name=${branchName}"
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    // Navigate to the react-app directory and install dependencies
                    dir('app/react-app') {
                        sh 'npm install'
                    }
                }
            }
        }

        stage('Run ESLint') {
            steps {
                script {
                    // Navigate to the react-app directory and run ESLint
                    dir('app/react-app') {
                        sh 'npm run lint'
                    }
                }
            }
        }

        stage('Build App Docker Image') {
            steps {
                script {
                    docker.build("shop_app_app:latest", "app")
                }
            }
        }
        
        stage('Build Database Docker Image') {
            steps {
                script {
                    docker.build("shop_app_database:latest", "database")
                }
            }
        }
        
        stage('Build Payment Gateway Docker Image') {
            steps {
                script {
                    docker.build("shop_app_payment_gateway:latest", "payment_gateway")
                }
            }
        }
        
        stage('Build Reverse Proxy Docker Image') {
            steps {
                script {
                    docker.build("shop_app_reverse_proxy:latest", "reverse_proxy")
                }
            }
        }
        
        stage('Run Docker Compose') {
            steps {
                script {
                    sh 'docker-compose up -d'
                }
            }
        }
    }
    
    post {
        always {
            script {
                sh 'docker-compose down'
            }
            cleanWs()
        }
    }
}
